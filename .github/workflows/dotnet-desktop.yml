# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: .NET Core Desktop

on:
  push:
    tags:
      - "v*"

jobs:

  build:

    strategy:
      matrix:
        configuration: [Release]

    runs-on: windows-latest  # For a list of available runner types, refer to
                             # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on

    env:
      Solution_Name: GenerateRoughnessMap                         # Replace with your solution name, i.e. MyWpfApp.sln.


    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        
        
    # Restore the application to populate the obj folder with RuntimeIdentifiers
    - name: Current Configuration
      run: echo $env:Solution_Name $env:Configuration
      env:
        Configuration: ${{ matrix.configuration }}
        
    - name: Get branch names
      id: branch-name
      uses: tj-actions/branch-names@v4.3
       
    - name: Set current solution as env variable
      id: solutionset
      run: echo "::set-output name=solution::GenerateRoughnessMap"
                    
    - name: Set current version as env variable
      id: versionnumb
      run: echo "::set-output name=currentversion::v0.2.0"
             
    - name: Set current os as env variable
      id: oschoice
      run: echo "::set-output name=choice::windows64"
      
    - name: Set current date as env variable
      id: datee
      run: echo "::set-output name=currentdate::$(date +'%Y-%m-%d_%H%M%S')"

    - name: Set env
      id: envname
      run: echo "::set-output name=outname::${{ steps.branch-name.outputs.current_branch }}-${{ steps.oschoice.outputs.choice }}-${{ steps.datee.outputs.currentdate }}"
          
    - name: Echo current env
      run: echo ${{ steps.envname.outputs.outname }}
    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.0.2


    # Restore the application to populate the obj folder with RuntimeIdentifiers
    - name: Restore the application
      run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration
      env:
        Configuration: ${{ matrix.configuration }}


    # Restore the application to populate the obj folder with RuntimeIdentifiers
    - name: Build msbuild  
      run: msbuild $env:Solution_Name/$env:Solution_Name.csproj /p:Configuration=$env:Configuration
      env:
        Configuration: ${{ matrix.configuration }}

                
    # Restore the application to populate the obj folder with RuntimeIdentifiers
    - name: Zip Build Files
      run: Compress-Archive $env:Solution_Name\bin\Release $env:Solution_Name\bin\Release.zip
      env:
        Configuration: ${{ matrix.configuration }}
        
    # Restore the application to populate the obj folder with RuntimeIdentifiers
    - name: Check Build Files
      run: dir $env:Solution_Name\bin
      env:
        Configuration: ${{ matrix.configuration }}
        
            
    - name: release
      uses: actions/create-release@v1
      id: create_release
      with:
        draft: false
        prerelease: true
        release_name: ${{ steps.envname.outputs.outname }}
        tag_name: ${{ steps.envname.outputs.outname }}
        body_path: ${{github.workspace}}/CHANGELOG.md
      env:
        GITHUB_TOKEN: ${{ github.token }}
      
    - name: Echo current release
      run: echo ${{ steps.envname.outputs.outname }}
        


    - name: Upload Windows Artifact
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ github.token }}
        Configuration: ${{ matrix.configuration }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./${{ steps.solutionset.outputs.solution }}/bin/Release.zip
        asset_name: Release.zip
        asset_content_type: application/vnd.microsoft.portable-executable
        
